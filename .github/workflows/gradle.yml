# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "feature/ver1.1.1" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: build
        
  test:
    runs-on: ubuntu-latest

    needs: build  # Ensure that the 'build' job is complete before starting this job

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew
    - name: Test with Gradle
      uses: gradle/gradle-build-action@v2.6.0
      with:
        arguments: test
        
  deploy:
    runs-on: ubuntu-latest

    needs: test  # Ensure that the 'test' job is complete before starting this job
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
      name: Check out code

    - name: Build & push Docker image
      run: |
        COMMIT_ID=$(git rev-parse --short ${{ github.sha }})
        IMAGE_NAME="minhan09/travel:latest"
        docker build . -t $IMAGE_NAME
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker push $IMAGE_NAME
